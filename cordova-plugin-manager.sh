#!/bin/bash

# Cordova Plugin Manager - Standalone library for managing Cordova plugin development
# Version 1.0.0

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–¥–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Å–∫—Ä–∏–ø—Ç—ã cordex
# –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ setup.sh —Ä—è–¥–æ–º —Å –æ—Å–Ω–æ–≤–Ω—ã–º —Å–∫—Ä–∏–ø—Ç–æ–º
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É npm
if [ ! -f "$SCRIPT_DIR/setup.sh" ]; then
    # –í npm –ø–∞–∫–µ—Ç–µ —Å–∫—Ä–∏–ø—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –≤ node_modules
    NPM_SCRIPT_DIR="$(dirname "$(which cordex 2>/dev/null || echo "$0")")"
    if [ -f "$NPM_SCRIPT_DIR/setup.sh" ]; then
        SCRIPT_DIR="$NPM_SCRIPT_DIR"
    elif [ -f "$(dirname "$NPM_SCRIPT_DIR")/lib/node_modules/cordex/setup.sh" ]; then
        SCRIPT_DIR="$(dirname "$NPM_SCRIPT_DIR")/lib/node_modules/cordex"
    fi
fi

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

show_help() {
    echo -e "${BLUE}Cordova Plugin Manager v1.0.0${NC}\n"
    echo "Usage: cordex <command> [arguments]"
    echo ""
    echo "Commands:"
    echo "  init                        Create new plugin with interactive setup"
    echo "  setup                       Setup new Cordova plugin from template in current directory"
    echo "  method add <methodName>     Add new method to existing plugin"
    echo "  method remove <methodName>  Remove method from existing plugin"
    echo "  plugin reinstall [pluginId] Reinstall plugin in Cordova project"
    echo "  help                        Show this help message"
    echo ""
    echo "Examples:"
    echo "  cordex init                        # Interactive setup with folder creation"
    echo "  cordex setup                       # Setup plugin in current directory"
    echo "  cordex method add myMethod         # Add new method to plugin"
    echo "  cordex method remove oldMethod     # Remove method from plugin"
    echo "  cordex plugin reinstall            # Interactive plugin selection"
    echo "  cordex plugin reinstall cordova-plugin-x  # Reinstall specific plugin"
    echo ""
    echo "Installation:"
    echo "  npm install -g cordex"
    echo "  npm update -g cordex  # Update to latest version"
}


init_plugin() {
    echo -e "${BLUE}üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ Cordova –ø–ª–∞–≥–∏–Ω–∞${NC}\n"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π SCRIPT_DIR –¥–æ —Å–º–µ–Ω—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    ORIGINAL_SCRIPT_DIR="$SCRIPT_DIR"
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ kebab-case
    to_kebab_case() {
        echo "$1" | sed 's/[A-Z]/-&/g' | sed 's/^-//' | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/-+/-/g' | sed 's/^-\|-$//g'
    }
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
    echo -e "${YELLOW}–í–≤–µ–¥–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞–≥–∏–Ω–∞:${NC}\n"
    
    read -p "1. –ù–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: awesome camera): " PLUGIN_SIMPLE_NAME
    read -p "2. –í–∞—à–µ –∏–º—è –∏–ª–∏ –∫–æ–º–ø–∞–Ω–∏—è: " AUTHOR_NAME
    read -p "3. GitHub username (–¥–ª—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è): " GITHUB_USERNAME
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if [[ -z "$PLUGIN_SIMPLE_NAME" || -z "$AUTHOR_NAME" || -z "$GITHUB_USERNAME" ]]; then
        echo -e "${RED}‚ùå –í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è!${NC}"
        exit 1
    fi
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
    PLUGIN_NAME_KEBAB=$(to_kebab_case "$PLUGIN_SIMPLE_NAME")
    FOLDER_NAME="cordova-plugin-${PLUGIN_NAME_KEBAB}"
    
    echo -e "\n${GREEN}üìÅ –°–æ–∑–¥–∞–µ—Ç—Å—è –ø–∞–ø–∫–∞: ${FOLDER_NAME}${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if [ -d "$FOLDER_NAME" ]; then
        echo -e "${RED}‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '$FOLDER_NAME' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç${NC}"
        exit 1
    fi
    
    echo -e "${BLUE}üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '$FOLDER_NAME'...${NC}"
    mkdir "$FOLDER_NAME"
    
    echo -e "${BLUE}üìÇ –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é '$FOLDER_NAME'...${NC}"
    cd "$FOLDER_NAME"
    
    # –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ setup
    export CORDEX_PLUGIN_SIMPLE_NAME="$PLUGIN_SIMPLE_NAME"
    export CORDEX_AUTHOR_NAME="$AUTHOR_NAME"
    export CORDEX_GITHUB_USERNAME="$GITHUB_USERNAME"
    export CORDEX_AUTO_MODE="true"
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º setup —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø—É—Ç–µ–º –∫ —Å–∫—Ä–∏–ø—Ç–∞–º
    if [ ! -f "$ORIGINAL_SCRIPT_DIR/setup.sh" ]; then
        echo -e "${RED}‚ùå Setup script not found.${NC}"
        echo -e "${YELLOW}Debug info:${NC}"
        echo "Looking for: $ORIGINAL_SCRIPT_DIR/setup.sh"
        echo "SCRIPT_DIR: $SCRIPT_DIR"
        echo "ORIGINAL_SCRIPT_DIR: $ORIGINAL_SCRIPT_DIR"
        echo "which cordex: $(which cordex 2>/dev/null || echo 'not found')"
        echo "Contents of SCRIPT_DIR:"
        ls -la "$ORIGINAL_SCRIPT_DIR" 2>/dev/null || echo "Directory not accessible"
        exit 1
    fi
    
    bash "$ORIGINAL_SCRIPT_DIR/setup.sh"
}

run_setup() {
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º setup.sh –∏–∑ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —á—Ç–æ –∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç
    if [ ! -f "$SCRIPT_DIR/setup.sh" ]; then
        echo -e "${RED}‚ùå Setup script not found.${NC}"
        exit 1
    fi
    
    bash "$SCRIPT_DIR/setup.sh"
}

add_method() {
    local method_name="$1"
    
    if [ -z "$method_name" ]; then
        echo -e "${RED}‚ùå Method name is required${NC}"
        echo "Usage: cordex method add <methodName>"
        exit 1
    fi
    
    if [ ! -f "$SCRIPT_DIR/add-method.sh" ]; then
        echo -e "${RED}‚ùå Add-method script not found.${NC}"
        exit 1
    fi
    
    if [ ! -f ".plugin-files" ]; then
        echo -e "${RED}‚ùå Plugin not initialized. Run 'setup' first.${NC}"
        exit 1
    fi
    
    bash "$SCRIPT_DIR/add-method.sh" "$method_name"
}

remove_method() {
    local method_name="$1"
    
    if [ -z "$method_name" ]; then
        echo -e "${RED}‚ùå Method name is required${NC}"
        echo "Usage: cordex method remove <methodName>"
        exit 1
    fi
    
    if [ ! -f "$SCRIPT_DIR/remove-method.sh" ]; then
        echo -e "${RED}‚ùå Remove-method script not found.${NC}"
        exit 1
    fi
    
    if [ ! -f ".plugin-files" ]; then
        echo -e "${RED}‚ùå Plugin not initialized. Run 'setup' first.${NC}"
        exit 1
    fi
    
    bash "$SCRIPT_DIR/remove-method.sh" "$method_name"
}

reinstall_plugin() {
    local specified_plugin="$1"
    echo -e "${BLUE}üîÑ –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–≥–∏–Ω–∞...${NC}\n"
    
    # –ò—â–µ–º Cordova –ø—Ä–æ–µ–∫—Ç
    CURRENT_DIR=$(pwd)
    CORDOVA_ROOT=""
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    if [ -f "config.xml" ] && [ -d "platforms" ]; then
        CORDOVA_ROOT="$CURRENT_DIR"
    else
        # –ò—â–µ–º –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
        while [ "$PWD" != "/" ]; do
            if [ -f "config.xml" ] && [ -d "platforms" ]; then
                CORDOVA_ROOT="$PWD"
                break
            fi
            cd ..
        done
        cd "$CURRENT_DIR"
    fi
    
    if [ -z "$CORDOVA_ROOT" ]; then
        echo -e "${RED}‚ùå Cordova –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.${NC}"
        exit 1
    fi
    
    echo -e "${GREEN}Cordova –ø—Ä–æ–µ–∫—Ç –Ω–∞–π–¥–µ–Ω: $CORDOVA_ROOT${NC}"
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–µ–Ω—å Cordova –ø—Ä–æ–µ–∫—Ç–∞
    cd "$CORDOVA_ROOT"
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–ª–∞–≥–∏–Ω–æ–≤
    PLUGINS=$(cordova plugin list 2>/dev/null | cut -d' ' -f1)
    
    if [ -z "$PLUGINS" ]; then
        echo -e "${YELLOW}–ü–ª–∞–≥–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã${NC}"
        exit 1
    fi
    
    # –ï—Å–ª–∏ –ø–ª–∞–≥–∏–Ω —É–∫–∞–∑–∞–Ω –≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    if [ -n "$specified_plugin" ]; then
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–ª–∞–≥–∏–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if echo "$PLUGINS" | grep -q "^$specified_plugin$"; then
            PLUGIN_ID="$specified_plugin"
            echo -e "${GREEN}–í—ã–±—Ä–∞–Ω –ø–ª–∞–≥–∏–Ω: $PLUGIN_ID${NC}"
        else
            echo -e "${RED}‚ùå –ü–ª–∞–≥–∏–Ω '$specified_plugin' –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö${NC}"
            echo -e "${BLUE}üìã –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–ª–∞–≥–∏–Ω—ã:${NC}"
            echo "$PLUGINS" | sed 's/^/  - /'
            exit 1
        fi
    else
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –ø–ª–∞–≥–∏–Ω–∞
        echo -e "${BLUE}üìã –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–ª–∞–≥–∏–Ω—ã:${NC}"
        
        # –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –ø–ª–∞–≥–∏–Ω–æ–≤
        PLUGIN_ARRAY=()
        i=1
        while IFS= read -r plugin; do
            if [ -n "$plugin" ]; then
                echo "  [$i] $plugin"
                PLUGIN_ARRAY[i]="$plugin"
                ((i++))
            fi
        done <<< "$PLUGINS"
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–ª–∞–≥–∏–Ω–æ–≤
        plugin_count=0
        for i in "${!PLUGIN_ARRAY[@]}"; do
            if [ -n "${PLUGIN_ARRAY[i]}" ]; then
                ((plugin_count++))
            fi
        done
        
        # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø–ª–∞–≥–∏–Ω, –≤—ã–±–∏—Ä–∞–µ–º –µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        if [ $plugin_count -eq 1 ]; then
            PLUGIN_ID="${PLUGIN_ARRAY[1]}"
            echo -e "\n${GREEN}–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–ª–∞–≥–∏–Ω: $PLUGIN_ID${NC}"
        else
            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —Å —Å—Ç—Ä–µ–ª–∫–∞–º–∏
            echo -e "\n${YELLOW}–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–≥–∏–Ω –¥–ª—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ‚Üë‚Üì –∏ Enter):${NC}"
            
            selected=1
            max_option=$plugin_count
            
            # –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é
            show_menu() {
                clear
                echo -e "${BLUE}üîÑ –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–≥–∏–Ω–∞...${NC}\n"
                echo -e "${GREEN}Cordova –ø—Ä–æ–µ–∫—Ç –Ω–∞–π–¥–µ–Ω: $CORDOVA_ROOT${NC}"
                echo -e "${BLUE}üìã –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–ª–∞–≥–∏–Ω—ã:${NC}\n"
                
                for i in $(seq 1 $max_option); do
                    if [ $i -eq $selected ]; then
                        echo -e "  ${GREEN}‚ñ∫ [$i] ${PLUGIN_ARRAY[i]}${NC}"
                    else
                        echo -e "    [$i] ${PLUGIN_ARRAY[i]}"
                    fi
                done
                
                echo -e "\n${YELLOW}–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ‚Üë‚Üì –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, Enter –¥–ª—è –≤—ã–±–æ—Ä–∞, q –¥–ª—è –≤—ã—Ö–æ–¥–∞${NC}"
            }
            
            # –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            while true; do
                show_menu
                
                # –ß–∏—Ç–∞–µ–º –æ–¥–Ω—É –∫–ª–∞–≤–∏—à—É
                read -rsn1 key
                
                case "$key" in
                    $'\x1b')  # Escape sequence
                        read -rsn2 key
                        case "$key" in
                            '[A')  # –°—Ç—Ä–µ–ª–∫–∞ –≤–≤–µ—Ä—Ö
                                if [ $selected -gt 1 ]; then
                                    ((selected--))
                                fi
                                ;;
                            '[B')  # –°—Ç—Ä–µ–ª–∫–∞ –≤–Ω–∏–∑
                                if [ $selected -lt $max_option ]; then
                                    ((selected++))
                                fi
                                ;;
                        esac
                        ;;
                    '')  # Enter
                        PLUGIN_ID="${PLUGIN_ARRAY[$selected]}"
                        clear
                        break
                        ;;
                    'q'|'Q')  # –í—ã—Ö–æ–¥
                        echo -e "\n${YELLOW}–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞${NC}"
                        exit 0
                        ;;
                esac
            done
        fi
    fi
    
    echo -e "\n${YELLOW}–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–≥–∏–Ω: $PLUGIN_ID${NC}"
    
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –ø–ª–∞–≥–∏–Ω—É
    PLUGIN_SOURCE_PATH=""
    LOCAL_PLUGIN_DIR=""
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º fetch.json —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ—Ç–∫—É–¥–∞ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–ª–∞–≥–∏–Ω
    if [ -f "plugins/fetch.json" ]; then
        ORIGINAL_SOURCE=$(grep -A 5 "\"$PLUGIN_ID\"" plugins/fetch.json | grep '"source"' | sed 's/.*"source": *"\([^"]*\)".*/\1/')
        if [ -n "$ORIGINAL_SOURCE" ] && [ "$ORIGINAL_SOURCE" != "$PLUGIN_ID" ]; then
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏—Å—Ö–æ–¥–Ω—ã–π –ø—É—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if [ -d "$ORIGINAL_SOURCE" ] && [ -f "$ORIGINAL_SOURCE/plugin.xml" ]; then
                PLUGIN_SOURCE_PATH="$ORIGINAL_SOURCE"
                echo -e "${GREEN}–ù–∞–π–¥–µ–Ω –∏—Å—Ö–æ–¥–Ω—ã–π –ø—É—Ç—å –ø–ª–∞–≥–∏–Ω–∞: $PLUGIN_SOURCE_PATH${NC}"
            fi
        fi
    fi
    
    # –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–π –ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—â–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–ø–∏–∏
    if [ -z "$PLUGIN_SOURCE_PATH" ]; then
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–ª–∞–≥–∏–Ω –∫–∞–∫ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞ (–Ω–µ –≤ plugins/)
        while IFS= read -r plugin_xml; do
            if [ -n "$plugin_xml" ]; then
                plugin_dir=$(dirname "$plugin_xml")
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º plugins/ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                if [[ "$plugin_dir" != ./plugins/* ]]; then
                    plugin_id_found=$(grep -o 'id="[^"]*"' "$plugin_xml" | head -1 | sed 's/id="//;s/"//')
                    if [ "$plugin_id_found" = "$PLUGIN_ID" ]; then
                        PLUGIN_SOURCE_PATH="$plugin_dir"
                        echo -e "${GREEN}–ù–∞–π–¥–µ–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥: $PLUGIN_SOURCE_PATH${NC}"
                        break
                    fi
                fi
            fi
        done < <(find . -name "plugin.xml" -not -path "./plugins/*" 2>/dev/null)
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–ª–∞–≥–∏–Ω –≤ plugins/ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (—ç—Ç–æ –∫–æ–ø–∏—è)
    if [ -d "plugins/$PLUGIN_ID" ]; then
        LOCAL_PLUGIN_DIR="plugins/$PLUGIN_ID"
        echo -e "${BLUE}–ù–∞–π–¥–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–æ–ø–∏—è: $LOCAL_PLUGIN_DIR${NC}"
    fi
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –ø–ª–∞–≥–∏–Ω
    echo -e "\n${YELLOW}üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–∞ $PLUGIN_ID...${NC}"
    cordova plugin remove "$PLUGIN_ID" --force 2>/dev/null || cordova plugin remove "$PLUGIN_ID" 2>/dev/null || true
    
    # –û—á–∏—â–∞–µ–º –∫–µ—à
    echo -e "${YELLOW}üßπ –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞...${NC}"
    rm -rf platforms/android/app/src/main/java/*/plugins/* 2>/dev/null || true
    rm -rf platforms/ios/*/Plugins/* 2>/dev/null || true
    rm -rf plugins/"$PLUGIN_ID" 2>/dev/null || true
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–∫—É–¥–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ø–ª–∞–≥–∏–Ω (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–º –∏—Å—Ö–æ–¥–Ω–∏–∫–∞–º)
    if [ -n "$PLUGIN_SOURCE_PATH" ] && [ -d "$PLUGIN_SOURCE_PATH" ]; then
        INSTALL_FROM="$PLUGIN_SOURCE_PATH"
        echo -e "${GREEN}–ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏—Å—Ö–æ–¥–Ω–∏–∫–∞: $INSTALL_FROM${NC}"
    else
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ npm registry
        INSTALL_FROM="$PLUGIN_ID"
        echo -e "${BLUE}–ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ npm registry${NC}"
    fi
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–≥–∏–Ω –∑–∞–Ω–æ–≤–æ
    echo -e "\n${GREEN}üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–≥–∏–Ω–∞ –∏–∑: $INSTALL_FROM${NC}"
    if cordova plugin add "$INSTALL_FROM"; then
        echo -e "\n${GREEN}‚úÖ –ü–ª–∞–≥–∏–Ω '$PLUGIN_ID' —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!${NC}"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        echo -e "\n${BLUE}üìã –†–µ–∑—É–ª—å—Ç–∞—Ç:${NC}"
        cordova plugin list | grep "$PLUGIN_ID" || echo "–ü–ª–∞–≥–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ"
        
    else
        echo -e "\n${RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–ª–∞–≥–∏–Ω–∞${NC}"
        exit 1
    fi
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∏—Å—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    cd "$CURRENT_DIR"
}

handle_method_command() {
    local subcommand="$1"
    local method_name="$2"
    
    case "$subcommand" in
        "add")
            if [ -z "$method_name" ]; then
                echo -e "${RED}‚ùå Method name is required${NC}"
                echo "Usage: cordex method add <methodName>"
                exit 1
            fi
            add_method "$method_name"
            ;;
        "remove")
            if [ -z "$method_name" ]; then
                echo -e "${RED}‚ùå Method name is required${NC}"
                echo "Usage: cordex method remove <methodName>"
                exit 1
            fi
            remove_method "$method_name"
            ;;
        "")
            echo -e "${RED}‚ùå Subcommand required${NC}"
            echo "Usage: cordex method <add|remove> <methodName>"
            echo ""
            echo "Available subcommands:"
            echo "  add <methodName>     Add new method to plugin"
            echo "  remove <methodName>  Remove method from plugin"
            exit 1
            ;;
        *)
            echo -e "${RED}‚ùå Unknown method subcommand: $subcommand${NC}"
            echo "Usage: cordex method <add|remove> <methodName>"
            exit 1
            ;;
    esac
}

handle_plugin_command() {
    local subcommand="$1"
    local plugin_id="$2"
    
    case "$subcommand" in
        "reinstall")
            reinstall_plugin "$plugin_id"
            ;;
        "")
            echo -e "${RED}‚ùå Subcommand required${NC}"
            echo "Usage: cordex plugin <reinstall> [pluginId]"
            echo ""
            echo "Available subcommands:"
            echo "  reinstall [pluginId]  Reinstall plugin in Cordova project"
            exit 1
            ;;
        *)
            echo -e "${RED}‚ùå Unknown plugin subcommand: $subcommand${NC}"
            echo "Usage: cordex plugin <reinstall> [pluginId]"
            exit 1
            ;;
    esac
}

# Main command handling
case "$1" in
    "init")
        init_plugin
        ;;
    "setup")
        run_setup
        ;;
    "method")
        handle_method_command "$2" "$3"
        ;;
    "plugin")
        handle_plugin_command "$2" "$3"
        ;;
    "help"|"--help"|"-h"|"")
        show_help
        ;;
    *)
        echo -e "${RED}‚ùå Unknown command: $1${NC}"
        echo ""
        show_help
        exit 1
        ;;
esac